# -*- coding: utf-8 -*-
"""Main.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enAfsECPdJ2rHZtln0uK1PiKx-6MZBo_
"""

import re

def message_probability(user_message, recognised_words, single_response=False, required_words=[]):
    message_certainty = 0
    has_required_words = True

    # Menghitung Kata
    for word in user_message:
        if word in recognised_words:
            message_certainty += 1

    # Menghitung persentase kata yang dikenali dalam pesan pengguna
    percentage = float(message_certainty) / float(len(recognised_words))

    # Memeriksa apakah kata yang diperlukan ada dalam string
    for word in required_words:
        if word not in user_message:
            has_required_words = False
            break

    # Harus memiliki kata-kata yang diperlukan, atau menjadi tanggapan tunggal
    if has_required_words or single_response:
        return int(percentage * 100)
    else:
        return 0


def check_all_messages(message):
    highest_prob_list = {}

    # Fungsi untuk membuat tanggapan dan menambahkannya ke dictionary
    def response(bot_response, list_of_words, single_response=False, required_words=[]):
        nonlocal highest_prob_list
        highest_prob_list[bot_response] = message_probability(message, list_of_words, single_response, required_words)

    # Tanggapan bot
    response('Saya sarankan Anda mencari informasi lebih lanjut tentang hal itu.', ['cari', 'informasi', 'mencari', 'penjelasan', 'lebih', 'lanjut'], required_words=['cari', 'informasi'])
    response('Saya tidak yakin. Apakah Anda bisa menjelaskannya lebih detail?', ['tidak', 'yakin', 'tidak', 'paham', 'tidak', 'mengerti'], required_words=['tidak', 'paham'])
    response('Bagaimana perasaan Anda tentang hal itu?', ['perasaan', 'pendapat', 'opini', 'bagaimana', 'mengenai', 'itu'], required_words=['perasaan', 'tentang'])
    response('Saya hanya seorang bot chat, jadi saya tidak bisa merasa atau memiliki perasaan seperti manusia.', ['apa', 'kabarmu'], required_words=['kabarmu'])
    response('Itu tergantung pada situasi dan konteksnya.', ['tergantung', 'situasi', 'tergantung', 'konteks'], required_words=['tergantung', 'situasi'])
    response('Tidak ada masalah!', ['aku', 'senang', 'kamu', 'bisa', 'membalas', 'tanggapanku'], required_words=['membalas', 'tanggapanku'])
    response('Tidak apa-apa, Selalu senang membantu!', ['terima', 'kasih', 'thanks', 'makasih', 'terimakasih'], single_response=True)
    response('Apa yang bisa saya bantu?', ['bisa', 'membantu', 'bisa', 'tolong'], required_words=['bisa', 'bantu'])
    response('Halo!', ['halo', 'hi', 'hey', 'hai', 'hallo'], single_response=True)
    response('Sampai Jumpa!', ['bye', 'goodbye'], single_response=True)

    best_match = max(highest_prob_list, key=highest_prob_list.get)

    return 'Maaf, saya tidak mengerti.' if highest_prob_list[best_match] < 1 else best_match


# Menggunakan untuk mendapatkan tanggapan
def get_response(user_input):
    split_message = re.split(r'\s+|[,;?!.-]\s*', user_input.lower())
    response = check_all_messages(split_message)
    return response


# Testing sistem tanggapan
while True:
    print('Bot:', get_response(input('Anda: ')))